service: StockDataLambda

frameworkVersion: '3'

provider:
  name: aws
  # runtime: python3.10
  region: us-west-2
  ecr:
    images:
      img:
        path: ./
        platform: linux/amd64

functions:
  dailyStockData:
    # handler: handler.dailyStockData
    role: DynamoIAM
    timeout: 500 # 5 minutes
    image:
      name: img
      command: 
        - handler.dailyStockData
    events:
      # Invoke Lambda function 1:30pm Mon-Fri PST
      - schedule: cron(30 20 ? * MON-FRI *)
  updateTickers:
    # handler: handler.updateTickerSymbols
    image:
      name: img
      command: 
        - handler.updateTickerSymbols
    role: DynamoIAM
  getTickers:
    # handler: handler.getTickerSymbols
    image:
      name: img
      command: 
        - handler.getTickerSymbols
    role: DynamoIAM

resources:
  Resources:
    DynamoIAM:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: DynamoIAM
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: DynamoIAMPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - s3:PutObject
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                  Resource: "*"

# custom:
#   pythonRequirements:
#     usePipenv: false
#     dockerizePip: true
#     dockerFile: Dockerfile

# plugins:
#   - serverless-python-requirements              
